1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

 Система складається з серверної частини на Node.js та Express.js, що відповідає за обробку запитів та бізнес-логіку програми, бази даних PostgreSQL для зберігання та управління даними, мобільного застосунка на Kotlin та IoT пристрою на Arduino, обидва взаємодіють з сервером через REST API. Крім того, є вебсайт на React, який також взаємодіє з сервером через REST API, надаючи користувачам інтерфейс для взаємодії з системою у веббраузері.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

 Для розробки сервера розробили діаграму розгортання, що є важливим інструментом для візуалізації фізичної архітектури системи (див. додаток Б, рис. Б.1.). За допомогою діаграми розгортання визначили розташування та зв'язки між компонентами, що дозволяє проєктувати, аналізувати та оптимізувати фізичну структуру системи, а також спрощує розуміння взаємодії між компонентами.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

 Для роботи з базами даних було обрано СУБД PostgreSQL, створено 16 таблиць та під'єднано один до одного. Для розробки сервера обрано WebStorm. Для підключення бази даних до сервера було використано плагін "Database Tools and SQL," після чого в налаштуваннях плагіну додала нове з'єднання з PostgreSQL, вказавши параметри підключення, такі як URL бази даних, ім'я користувача та пароль.
 Для роботи з сервером було використано різні технології. Express.js – фреймворк для побудови застосунків на Node.js, що дозволяє швидко розробляти маршрути, обробляти запити. Sequelize – це ORM (Object-Relational Mapping), який дозволяє взаємодіяти з базою даних SQL за допомогою JavaScript. 
 За структурою можна виділити model, controllers, routers та services. В моделях описуються структури даних та відображають таблиці бази даних.
 Контролери відповідають за обробку запитів та виклик відповідних методів моделей. Вони приймають дані з маршрутів, викликають відповідні методи моделей та повертають відповідь клієнту.
 Роутери відповідають за визначення маршрутів та пов'язані з ними контролери. Вони розподіляють запити від клієнтів на відповідні контролери для обробки.
 Middleware - це функції, які обробляють запити перед тим, як вони дійдуть до маршрутів. 

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

 Система розрахована на три типи користувачів, а саме компанія, керівник відділу та звичайний працівник.
 Розглянемо інформаційні потреби компанії через діаграму прецедентів, що наведено у додатку А, на рисунку А.1. Перш за все, компанія може зареєструватись у системі та робити вхід в профіль. Компанія також може обрати та змінити тип підписки. Можливість оновити дані також наявна. Компанія може створити нові відділи та редагувати їх.
 Компанія додає своїх працівників, при реєстрації створюється пошта, на основі прізвища та ім’я,  та пароль. Перегляд працівників та видалення, за потреби, але коли працівника звільняють, компанія може змінити статус на відповідний.
 Для підтримки мотивації користувачів є система винагород та досягнень. Компанія може створити нагороди, та визначити необхідні для цього бали. Призначати досягнення та нагороди керівникам за якийсь виконаний проєкт або інші види активності, кожне досягнення дорівнює певним балам, які ідуть на рахунок кожного керівника. Також перегляд кількість відкритих, в процесі та завершених завдань з відсотковим відношенням.
 Для уникнення понаднормової роботи, компанії визначають час, кількість робочих днів, та допустиму норму понаднормової роботи. Перегляд робочих годин працівників.
 Якщо компанія планує застосовувати безконтактні картки для відстеження місцеположення працівників, тоді компанія повинна реєструвати кімнати, в яких будуть знаходитись датчики. Наявне видалення та перегляд кімнат. Також є можливість реєструвати картки для працівників. Перегляд, та оновлення карток.  Компанія може переглядати час перебування користувачів в різних кімнатах підприємства.
 Розглянемо інформаційні потреби керівників відділів через діаграму прецедентів, що наведено у додатку А, на рисунку А.2. Керівник може війти у свій профіль, змінити інформацію, щодо особистих даних, змінити пароль, бо спочатку він генерується автоматично, коли створюється профіль.
 Керівник має можливість реєструвати початок, кінець робочого дня, а також початок та кінець перерви. На основі даних налаштувань робочих годин в компанії розраховується понаднормова праця. Можливо переглядати дані про роботу усіх працівників відділу. А також змінення їх статусу роботи.
 Керівник має право призначати досягнення працівникам за якийсь виконаний проєкт або інші види активності, кожне досягнення дорівнює певним балам, які ідуть на рахунок кожного користувача. Керівник має право призначити нагороду працівникам, яка потребує певної кількості балів на рахунку, а також самостійно отримати нагороду та викупити її за бали на рахунку.
 Керівник може створювати завдання, змінювати їх, призначати працівників, які повинні будуть виконувати їх, створювати коментарі та переглядати усі коментарі до завдання.
 Якщо компанія підтримує систему безконтактних карток для визначення часу проведених у певних кімнатах, де встановлені датчики, то керівник може отримати картку та позначати свою присутність у кімнаті.
 Розглянемо інформаційні потреби працівника через діаграму прецедентів, що наведено у додатку А, на рисунку А.3. Працівник, як і керівник, може зайти у свій профіль, змінити пароль, оновити особисті дані.
 Працівник може переглядати завдання, що їм назначені, оновлювати, переглядати коментарі до завдання та писати власні коментарі.
 Працівник може отримати досягнення, таким чином його баланс балів збільшується, отримати нагороду, та викупити її, а саме заплатити балами, нагорода може бути як фізична, так і віртуальна.
 Можливо реєструвати проведений час на роботі, а саме початок, кінець та перерва. При роботі більше ніж нормований графік, визначаються години понаднормової праці.
 Якщо компанія підтримує систему безконтактних карток для визначення часу проведених у певних кімнатах, де встановлені датчики, то працівник може отримати картку та позначати свою присутність у кімнаті.

5 ПОБУДОВА ER-ДІАГРАМИ

 Для проєктування бази даних було розроблено ER-модель даних діаграму за нотацією Чена, що знаходиться у додатку А на рисунку А.4. Усього 14 таблиць та 58 неключових атрибутів. Розглянемо детальніше. Одна компанія може мати лише 1 тип підписки, так само як і статус. Користувач, який відображає працівника або керівника, може мати лише 1 статус. Компанія може мати багато кімнат, але 1 кімната належить тільки 1 компанії, користувач може мати одну карту. Журнал доступу може мати лише 1 кімнату та 1 карту. Користувач може мати багато завдань, так само і задання можуть мати багато виконавців. Користувач може написати багато коментарів, але у коментарів лише 1 користувач. Налаштування робочого часу відповідають одній компанії. Користувач може мати багато записів щодо робочих годин. Користувач може мати багато нагород та досягнень, відділ може мати багато користувачів, а компанія може мати багато відділів.

6 СПЕЦИФІКАЦІЯ REST
     
 REST API в розробленому проєкті складається з 70 кінцевих точок. Кожна кінцева точка відповідає за надання даних клієнту та виконання бізнес-логіки. Специфікація кожної кінцевої точки REST API проєкту наведена у посиланні 1.
 
7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

 Було розроблено діаграму станів для компанії, керівника та працівника. (див. дод. В, рис. В.1 – В.3). Ця діаграма дозволяє показати можливі стани системи, події, які можуть спричинити переходи між станами, і дії, які відбуваються в кожному стані.

ВИСНОВКИ
 
 Під час лабораторної роботи було розроблено документацію щодо архітектури та компоненти сервера, бази даних. Розроблено серверну частину для програмної системи для контролю ефективності роботи працівників на мові JavaScript. Працездатність перевірено за допомогою тестів.