1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ
     
	Для розробки клієнтської частини системи «PerformMentor» було використано мову програмування TypeScript з використанням бібліотеки React та CSS для стилізації.
	Для реалізації локалізації інтерфейсу було використано бібліотеку react-intl, що допомагає впроваджувати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків.
	Для реалізації навігації на сайті використано бібліотеку react-router-dom, яка надає інструменти для створення реактивної навігації та управління маршрутами вебзастосунка.
 	Для виконання асинхронних запитів на сервер використано бібліотеку axios, яка забезпечує інтерфейс для взаємодії з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
	Бібліотека react-icons/fa використана для додавання іконок FontAwesome у компоненти інтерфейсу, що забезпечує візуальне покращення та підвищує зручність використання застосунку.
	Бібліотека react-chartjs-2 використовується для інтеграції Chart.js з React, що дозволяє легко створювати інтерактивні графіки та діаграми, надаючи користувачам можливість візуалізувати дані у зручному форматі.
	Бібліотека react-datepicker застосована для реалізації компонента вибору дат, що забезпечує зручний інтерфейс для введення та вибору дат користувачами, інтегруючись з інтерфейсом застосунку.
	На рисунку 1 зображено діаграму пакетів для візуалізації використаних пакетів.
	Розроблено клієнтську частину за допомогою Feature-Sliced архітектури. Вона визначає побудову проєкту за допомогою шарів. Шари включають зрізи, які включають сегменти. Шари – це каталоги верхнього рівня застосунку. 
	У проєкті визначено 8 шарів: app, components, context, features, hooks, interfaces, pages, та styles. Шар app містить відповідальність за ініціалізацію та конфігурацію. Шар components містить компоненти, які можуть бути використані на різних сторінках або в різних функціональних частинах застосунку декілька разів. Шар context містить контексти, які використовуються для керування станом застосунку та передачі даних між компонентами. Шар features відповідає за функціонал застосунку. Шар hooks відповідає за об’єкти хуків, які дозволяють компонентам отримувати доступ до станів системи. Шар interfaces визначає інтерфейси моделей, які використовуються для обміну даними з сервером та їхнього представлення на сторінках. Шар pages містить сторінки сайту.  Шар styles містить стиль сторінок.
	Для більш детального розуміння архітектури системи було розроблено діаграму компонентів (див. додаток Б, рис. Б.1).

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
     
     	Під час лабораторної роботи було розроблено діаграми прецедентів для вебзастосунка, що наведено у додатку А на рисунках А.1, A.2, A.3. На діаграмах зображено 3 актори відповідно: компанія, керівник відділу та працівник. 
	З діаграми на рисунку А.1 бачимо, що компанія може зареєструватись та війти у свій профіль. Можливе оновлення налаштувань робочих годин та даних компанії, таких як назва та адреса. Компанія може переглядати відділи які вже створені, редагувати їх та додати новий. Є можливість створення нагород та перегляд працівників або керівників, яким вони були призначені. Для перегляду статистики завдань, існує кругова діаграма, що відображає кількість завдань певного типу, наприклад, відкрито, в процесі, закрито. Компанія може переглядати, редагувати працівників та керівників, що працюють у них, а фільтрація за відділом та пошук за прізвищем полегшують навігацію між ними. Можливо зареєструвати нового працівника.
	З діаграми на рисунку А.2 бачимо, що керівник може зайти у свій профіль, змінити пароль, переглядати свої досягнення, коли досягнення назначають, керівник отримує бали, що відображається на балансі, отримати нагороду, і тоді бали списуються з балансу, а потім керівник може її забрати. Є можливість переглядати завдання, оновлювати їх та переглядати, створити, видаляти коментарі до них. Керівник може  створити завдання та призначити їх іншим співробітникам відділу. 
	З діаграми на рисунку А.3 бачимо, що працівник може зайти у свій профіль, змінити пароль, переглядати свої досягнення, отримати нагороду. До кожного назначеного завдання можна переглянути, створити та видалити коментарі.


3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
 
	Для розробки клієнтської частини системи «PerformMentor» було використано мову програмування TypeScript з використанням бібліотеки React та CSS для стилізації.
	Для реалізації локалізації інтерфейсу було використано бібліотеку react-intl, що допомагає впроваджувати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків.
	Для реалізації навігації на сайті використано бібліотеку react-router-dom, яка надає інструменти для створення реактивної навігації та управління маршрутами вебзастосунка.
 	Для виконання асинхронних запитів на сервер використано бібліотеку axios, яка забезпечує інтерфейс для взаємодії з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
	Бібліотека react-icons/fa використана для додавання іконок FontAwesome у компоненти інтерфейсу, що забезпечує візуальне покращення та підвищує зручність використання застосунку.
	Бібліотека react-chartjs-2 використовується для інтеграції Chart.js з React, що дозволяє легко створювати інтерактивні графіки та діаграми, надаючи користувачам можливість візуалізувати дані у зручному форматі.
	Бібліотека react-datepicker застосована для реалізації компонента вибору дат, що забезпечує зручний інтерфейс для введення та вибору дат користувачами, інтегруючись з інтерфейсом застосунку.
	На рисунку 1 зображено діаграму пакетів для візуалізації використаних пакетів. 


4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ
 
	Розроблено клієнтську частину за допомогою Feature-Sliced архітектури. Вона визначає побудову проєкту за допомогою шарів. Шари включають зрізи, які включають сегменти. Шари – це каталоги верхнього рівня застосунку. 
	У проєкті визначено 8 шарів: app, components, context, features, hooks, interfaces, pages, та styles. Шар app містить відповідальність за ініціалізацію та конфігурацію. Шар components містить компоненти, які можуть бути використані на різних сторінках або в різних функціональних частинах застосунку декілька разів. Шар context містить контексти, які використовуються для керування станом застосунку та передачі даних між компонентами. Шар features відповідає за функціонал застосунку. Шар hooks відповідає за об’єкти хуків, які дозволяють компонентам отримувати доступ до станів системи. Шар interfaces визначає інтерфейси моделей, які використовуються для обміну даними з сервером та їхнього представлення на сторінках. Шар pages містить сторінки сайту.  Шар styles містить стиль сторінок.
	Для більш детального розуміння архітектури системи було розроблено діаграму компонентів (див. додаток Б, рис. Б.1).


5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

	Керівник та працівник починають працювати з системою при вводі даних, коли входять в систему. Працівник має менше можливостей у порівнянні з керівником. Тому характерні можливості це перегляд досягнень, перегляд власних нагород та можливість забрати нагороди, оновити пароль. При перегляді назначених завдань, працівник або керівник можуть оновити завдання, переглянути виконавців, переглянути коментарі, та додати або видалити їх.
	У керівника є ще можливість переглядати працівників та керівників відділу, до якого він належить. Тоді керівник може призначити досягнення, що додають бали до балансу, та призначати нагороди, за які треба платити з балансу. Також створити завдання та призначити виконавців зі співробітників відділу (див. рис. В.1).
	Якщо розглядати компанію, то її взаємодія зі системою починається при вводі даних під час реєстрації або входу в профіль. Компанія може редагувати власну інформацію, переглядати відділи, редагувати їх та створити новий. При перегляді нагород, компанія також може створити нову, визначивши назву, опис, кількість балів необхідних для її отримання. При перегляді працівників та керівників можливо здійснити пошук за прізвищем та фільтрувати за назвою відділу. Можливо оновити їх персональні дані та змінити посаду, наприклад, підвищити до статусу одного із керівника відділу. При реєстрації працівника, компанія вводить дані та відділ, після чого отримує пароль та пошту користувача. Для підвищення продуктивності компанія також бачить статистику завдань в компанії  та може переглядати нагороди працівників (див. рис. В.2).
 

ВИСНОВКИ

     Під час виконання лабораторної роботи була реалізована клієнтська частина для проєкту «Програмна система для контролю ефективності роботи працівників на підприємстві». У роботі використано мову TypeScript, бібліотеку React для розробки й CSS для стилізації. При розробці було дотримано правил чистого коду та використано Feature-Sliced архітектуру.