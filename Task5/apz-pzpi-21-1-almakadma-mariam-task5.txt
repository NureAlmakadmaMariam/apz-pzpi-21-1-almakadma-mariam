1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ

	Розроблено мобільну частину за допомогою Clean Architecture, яка дозволяє розділити відповідальність між різними частинами застосунку та зробити його зрозумілим, масштабованим і тестованим.
	Презентаційний шар включає activities та adapters. Тут відбувається взаємодія з користувачем та відображення даних. 
	Доменний шар містить бізнес-логіку застосунку, яку реалізовано у services. Сервіси взаємодіють із моделями та виконують основні операції, такі як отримання списків даних та їх оновлення. 
	Шар даних відповідає за доступ до даних і включає network. Тут реалізовано мережеві запити для отримання даних з сервера. Моделі також можна віднести до цього шару, оскільки вони представляють структуру даних, що надходять з мережі.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

	Користувачами мобільного застосунку є працівники або керівники компанії, що зареєстрована в системі «PerformMentor». Функціонал для користувачів є однаковим. Спочатку треба авторизуватися, для цього потрібно ввести електрону пошту та пароль. 
	За наявності нагород у користувача, він може їх переглядати. Якщо користувач ще не забрав нагороду, то має можливість це зробити. 
	Реєстрація годин роботи працівника відбувається за допомогою мобільного застосунку, а саме реєстрація початку робочого дня, початку перерви, кінець перерви та робочого дня. Користувач може переглянути інформацію відповідно до днів, коли працював, а також загальну тривалість робочого дня. Таким чином можливо відстежити ефективність роботи (див. додаток А, рис. А.1). 

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

	Для розширення можливостей Kotlin в Android використовується пакет core-ktx, який надає ефективний спосіб взаємодії з різними компонентами Android. Наприклад, дозволяє писати чистий, компактний код, що прискорює процес розробки та зменшує ймовірність виникнення помилок.
	Використовуємо пакет appcompat, що допомагає підтримувати старі версій Android та забезпечення сумісності з сучасними функціями. Також він забезпечує однорідний інтерфейс для користувачів на різних версіях Android, що полегшує розробку та покращує сприйняття користувачів.
	Пакет material використовується для створення інтерфейсів користувача з використанням компонентів Material Design. Таким чином, це спрощує створення привабливих і сучасних інтерфейсів, забезпечуючи однорідний вигляд додатків на різних платформах.
	Для створення складних інтерфейсів користувача за допомогою обмежень використовуємо пакет constraintlayout, який дозволяє створювати гнучкі та адаптивні макети інтерфейсу, що автоматично пристосовуються до різних розмірів екранів та пристроїв. 
	Використовуємо бібліотеку retrofit для здійснення HTTP-запитів. Він спрощує роботу з мережевими запитами, забезпечуючи високий рівень абстракції та підтримку різних форматів обміну даними.
	Для здійснення мережевих запитів використовується HTTP клієнт okhttp, що надає швидкий та ефективний спосіб взаємодії з вебслужбами через HTTP-запити. 
	На рисунку 1 зображено діаграму пакетів для візуалізації використаних пакетів. 

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТ

	У додатку Б на рисунку Б.1 можна переглянути діаграму компонентів мобільної частини. Пакет activities містить основні екранні компоненти застосунку. Кожна активність відповідає за певний екран і взаємодію з користувачем. Прикладом є активність LoginActivity, що відповідає за вхід у профіль.
	Пакет adapters містить адаптери для RecyclerView, що відповідають за відображення списків даних у RecyclerView. У проєкті адаптери використовуються для динамічного відображення списків винагород та робочих годин користувачів.
	Пакет models містить моделі, що представляють структуру даних, які використовуються у застосунку.
	Пакет network відповідає за налаштування та роботу з мережевими запитами. Він використовує бібліотеку Retrofit для створення HTTP-клієнта та взаємодії з сервером.
	Пакет services містить сервіси, які відповідають за різні аспекти, такі як аутентифікація користувача, обробка нагород та управління годинами роботи, спрощуючи комунікацію між клієнтом і сервером та забезпечуючи потрібні дані для функціонування застосунку.
	Пакет util містить допоміжні класи та утиліти. Наприклад, SessionManager відповідає за зберігання та отримання даних сесії користувача, або NavigationUtil, що містить методи для налаштування навігаційних компонентів.

5 ПОБУДОВА ДІАГРАМИ СТАНІВ

	Було розроблено діаграму станів для користувачів (див. додаток. В, рис. В.1). Діаграма розроблена для відображення різних можливих станів системи, подій, які можуть призвести до переходів між цими станами, а також дій, які відбуваються у кожному з цих станів.

ВИСНОВКИ

	У ході лабораторної роботи було розроблено мобільну частину програмної системи PerformMentor.